// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimate_sgd
Rcpp::DataFrame estimate_sgd(const Rcpp::DataFrame& inputData, const Rcpp::List& calibratableParams, const Rcpp::List& constParams, int windowSize);
RcppExport SEXP _SGDr_estimate_sgd(SEXP inputDataSEXP, SEXP calibratableParamsSEXP, SEXP constParamsSEXP, SEXP windowSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type inputData(inputDataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type calibratableParams(calibratableParamsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type constParams(constParamsSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_sgd(inputData, calibratableParams, constParams, windowSize));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_ModelModule();

static const R_CallMethodDef CallEntries[] = {
    {"_SGDr_estimate_sgd", (DL_FUNC) &_SGDr_estimate_sgd, 4},
    {"_rcpp_module_boot_ModelModule", (DL_FUNC) &_rcpp_module_boot_ModelModule, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SGDr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
